generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Problem {
  id             Int                  @id @default(autoincrement())
  title          String
  description    String
  authorId       BigInt?
  difficulty     String
  tags           String[]
  time           Int
  memory         Int
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  author         authentication_user? @relation(fields: [authorId], references: [id])
  submissions    Submission[]
  testCases      TestCase[]           @relation("testCase")
  sampleTestCase TestCase?            @relation("sample")

  @@map("problems")
}

model TestCase {
  id              Int      @id @default(autoincrement())
  problemId       Int?
  sampleProblemId Int?     @unique
  input           String
  output          String
  problem         Problem? @relation("testCase", fields: [problemId], references: [id])
  sampleProblem   Problem? @relation("sample", fields: [sampleProblemId], references: [id])

  @@map("test_cases")
}

model Submission {
  id        Int                 @id @default(autoincrement())
  problemId Int
  userId    BigInt
  code      String
  language  String
  input     String
  status    String              @default("In Queue")
  problem   Problem             @relation(fields: [problemId], references: [id])
  user      authentication_user @relation(fields: [userId], references: [id])

  @@map("submissions")
}

model auth_group {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @unique @db.VarChar(150)
  auth_group_permissions     auth_group_permissions[]
  authentication_user_groups authentication_user_groups[]

  @@index([name], map: "auth_group_name_a6ea08ec_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([group_id], map: "auth_group_permissions_group_id_b120cbf9")
  @@index([permission_id], map: "auth_group_permissions_permission_id_84c5c92e")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_permission {
  id                                   Int                                    @id @default(autoincrement())
  name                                 String                                 @db.VarChar(255)
  content_type_id                      Int
  codename                             String                                 @db.VarChar(100)
  auth_group_permissions               auth_group_permissions[]
  django_content_type                  django_content_type                    @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
  authentication_user_user_permissions authentication_user_user_permissions[]

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
  @@index([content_type_id], map: "auth_permission_content_type_id_2f476e4b")
}

model authentication_forgetpassword {
  id         BigInt   @id @default(autoincrement())
  email      String?  @db.VarChar(255)
  token      String?  @db.VarChar(50)
  created_at DateTime @db.Timestamptz(6)
}

model authentication_onetimepassword {
  id         BigInt   @id @default(autoincrement())
  email      String?  @unique @db.VarChar(255)
  otp        String   @db.VarChar(6)
  created_at DateTime @db.Timestamptz(6)

  @@index([email], map: "authentication_onetimepassword_email_cfe9c50b_like")
}

model authentication_user {
  password                             String                                 @db.VarChar(128)
  id                                   BigInt                                 @id @default(autoincrement())
  email                                String                                 @unique @db.VarChar(255)
  username                             String?                                @unique @db.VarChar(100)
  is_superuser                         Boolean
  is_verified                          Boolean
  date_joined                          DateTime                               @db.Timestamptz(6)
  last_login                           DateTime                               @db.Timestamptz(6)
  auth_provider                        String                                 @db.VarChar(50)
  is_active                            Boolean
  is_staff                             Boolean
  authentication_user_groups           authentication_user_groups[]
  authentication_user_user_permissions authentication_user_user_permissions[]
  django_admin_log                     django_admin_log[]
  quiz_quiz                            quiz_quiz[]
  quiz_registeredparticipant           quiz_registeredparticipant[]
  quiz_submission                      quiz_submission[]
  token_blacklist_outstandingtoken     token_blacklist_outstandingtoken[]
  submission                           Submission[]
  problem                              Problem[]

  @@index([email], map: "authentication_user_email_2220eff5_like")
  @@index([username], map: "authentication_user_username_a09a089e_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model authentication_user_groups {
  id                  BigInt              @id @default(autoincrement())
  user_id             BigInt
  group_id            Int
  authentication_user authentication_user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "authentication_user__user_id_30868577_fk_authentic")
  auth_group          auth_group          @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "authentication_user_groups_group_id_6b5c44b7_fk_auth_group_id")

  @@unique([user_id, group_id], map: "authentication_user_groups_user_id_group_id_8af031ac_uniq")
  @@index([group_id], map: "authentication_user_groups_group_id_6b5c44b7")
  @@index([user_id], map: "authentication_user_groups_user_id_30868577")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model authentication_user_user_permissions {
  id                  BigInt              @id @default(autoincrement())
  user_id             BigInt
  permission_id       Int
  auth_permission     auth_permission     @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "authentication_user__permission_id_ea6be19a_fk_auth_perm")
  authentication_user authentication_user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "authentication_user__user_id_736ebf7e_fk_authentic")

  @@unique([user_id, permission_id], map: "authentication_user_user_user_id_permission_id_ec51b09f_uniq")
  @@index([permission_id], map: "authentication_user_user_permissions_permission_id_ea6be19a")
  @@index([user_id], map: "authentication_user_user_permissions_user_id_736ebf7e")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.Timestamptz(6)
  object_id           String?
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.SmallInt
  change_message      String
  content_type_id     Int?
  user_id             BigInt
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  authentication_user authentication_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_authentication_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String
  expire_date  DateTime @db.Timestamptz(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
  @@index([session_key], map: "django_session_session_key_c0390e0f_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model quiz_choice {
  id              BigInt            @id @default(autoincrement())
  choice_text     String            @db.VarChar(200)
  is_correct      Boolean
  question_id     BigInt
  quiz_question   quiz_question     @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quiz_choice_question_id_6297ad3f_fk_quiz_question_id")
  quiz_submission quiz_submission[]

  @@index([question_id], map: "quiz_choice_question_id_6297ad3f")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model quiz_question {
  id              BigInt            @id @default(autoincrement())
  title           String            @db.VarChar(200)
  description     String
  quiz_id         BigInt
  quiz_choice     quiz_choice[]
  quiz_quiz       quiz_quiz         @relation(fields: [quiz_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quiz_question_quiz_id_b7429966_fk_quiz_quiz_id")
  quiz_submission quiz_submission[]

  @@index([quiz_id], map: "quiz_question_quiz_id_b7429966")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model quiz_quiz {
  id                         BigInt                       @id @default(autoincrement())
  title                      String                       @unique(map: "quiz_quiz_title_eebababc_uniq") @db.VarChar(200)
  start_time                 DateTime                     @db.Timestamptz(6)
  end_time                   DateTime                     @db.Timestamptz(6)
  description                String
  admin_id                   BigInt
  quiz_question              quiz_question[]
  authentication_user        authentication_user          @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quiz_quiz_admin_id_c4779dff_fk_authentication_user_id")
  quiz_registeredparticipant quiz_registeredparticipant[]

  @@index([admin_id], map: "quiz_quiz_admin_id_c4779dff")
  @@index([title], map: "quiz_quiz_title_eebababc_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model quiz_registeredparticipant {
  id                  BigInt              @id @default(autoincrement())
  quiz_id             BigInt
  quizinee_id         BigInt
  score               Int
  authentication_user authentication_user @relation(fields: [quizinee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quiz_registeredparti_quizinee_id_9c017a58_fk_authentic")
  quiz_quiz           quiz_quiz           @relation(fields: [quiz_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quiz_registeredparticipant_quiz_id_e7d5ffad_fk_quiz_quiz_id")

  @@index([quiz_id], map: "quiz_registeredparticipant_quiz_id_e7d5ffad")
  @@index([quizinee_id], map: "quiz_registeredparticipant_quizinee_id_9c017a58")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model quiz_submission {
  id                  BigInt               @id @default(autoincrement())
  quizinee_id         BigInt?
  selected_choice_id  BigInt?
  question_id         BigInt?
  quiz_question       quiz_question?       @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quiz_submission_question_id_9d0b4bdb_fk_quiz_question_id")
  authentication_user authentication_user? @relation(fields: [quizinee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quiz_submission_quizinee_id_d30ba86d_fk_authentication_user_id")
  quiz_choice         quiz_choice?         @relation(fields: [selected_choice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quiz_submission_selected_choice_id_d2e182a1_fk_quiz_choice_id")

  @@index([question_id], map: "quiz_submission_question_id_9d0b4bdb")
  @@index([quizinee_id], map: "quiz_submission_quizinee_id_d30ba86d")
  @@index([selected_choice_id], map: "quiz_submission_selected_choice_id_d2e182a1")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model token_blacklist_blacklistedtoken {
  id                               BigInt                           @id @default(autoincrement())
  blacklisted_at                   DateTime                         @db.Timestamptz(6)
  token_id                         BigInt                           @unique
  token_blacklist_outstandingtoken token_blacklist_outstandingtoken @relation(fields: [token_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_blacklist_blacklistedtoken_token_id_3cc7fe56_fk")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model token_blacklist_outstandingtoken {
  id                               BigInt                            @id @default(autoincrement())
  token                            String
  created_at                       DateTime?                         @db.Timestamptz(6)
  expires_at                       DateTime                          @db.Timestamptz(6)
  user_id                          BigInt?
  jti                              String                            @unique(map: "token_blacklist_outstandingtoken_jti_hex_d9bdf6f7_uniq") @db.VarChar(255)
  token_blacklist_blacklistedtoken token_blacklist_blacklistedtoken?
  authentication_user              authentication_user?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_blacklist_outs_user_id_83bc629a_fk_authentic")

  @@index([jti], map: "token_blacklist_outstandingtoken_jti_hex_d9bdf6f7_like")
  @@index([user_id], map: "token_blacklist_outstandingtoken_user_id_83bc629a")
}

enum AuthProvider {
  email
  google
}
